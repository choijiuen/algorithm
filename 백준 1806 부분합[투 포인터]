package algo;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.StringTokenizer;

public class BJ_1806 {

public static void main(String[] args) throws IOException {
BufferedReader br = new BufferedReader (new InputStreamReader (System.in));

StringTokenizer st = new StringTokenizer(br.readLine());
PriorityQueue heap = new PriorityQueue();

int N = Integer.parseInt(st.nextToken());
int S = Integer.parseInt(st.nextToken());
int a[] = new int [N];
int start =0;
int end =0;
int sum =0;

int res = 0;

// int res[] = new int [N]; //결과 배열

st = new StringTokenizer(br.readLine());

for(int i=0; i a[i] = Integer.parseInt(st.nextToken());
// System.out.println(a[i]);
}



while(true) { //start, end 가 끝에 도달하면 멈춤
if(sum>=S) { //sum이 S보다 크면
sum -=a[start++]; //sum에 start값을 증가 시켜서  빼줌
}else if(end == N) {  //굳이 S에 대한 조건을 지정을 안해 준 것은 조건문을 안거치고 내려왔다는 것은 s가 이동을 해도 
break;                    //sum 값이 N을 못넘는 다는 것이기 때문에 그냥 끝내 버린다.
}else { //sum이 S보다 작으면 
sum +=a[end++]; //sum에 end값을 증가 시켜서 더해줌
}

if(sum>=S) {
heap.add(end-start);
}


}

if(heap.size() == 0) {
System.out.println(0);
}else {
System.out.println(heap.peek());
}




}

}
